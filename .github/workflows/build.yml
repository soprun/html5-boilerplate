name: Continuous integration

on:
  push:
    branches:
      - develop
  pull_request:
    branches:
      - develop
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node.js
        uses: actions/setup-node@v2
        env:
          NODE_ENV: development
        with:
          node-version: '14'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Get config cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Setup npm cache node_modules
        uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run lint
        continue-on-error: true
        run: npm run lint

      - name: Run test
        continue-on-error: true
        run: npm run test

      - name: Run audit
        continue-on-error: true
        run: npm audit --production

      - name: Run npm-check
        continue-on-error: true
        run: npm run npm-check

      - name: Run build in production mode
        run: npm run build --if-present

      - name: Uploading an archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: build-dist
          path: |
            dist
            !dist/**/*.md

#  deploy-stag:
#    needs: build
#    if: github.event == 'pull_request' && github.ref == 'refs/heads/develop'
#    name: Staging deployment
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#    env:
#      # Секретные секретеры твоего приложение, (например подключение к базе данных, открытый API ключ и так далее).
#      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
#      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
#
#      SUPER_SECRET: ${{ secrets.SUPER_SECRET }}
#    environment:
#      name: staging
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Downloading an archive production artifacts
#        uses: actions/download-artifact@v2
#        with:
#          path: dist
#
#      - name: Install SSH Key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
#
#      - name: Adding Known Hosts
#        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
#
#      - name: Deploy with rsync
#        run: rsync -avz . ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}
#
#  deploy-prod:
#    needs: build
#    if: github.event == 'pull_request' && github.ref == 'refs/heads/master'
#    name: Production deployment
#    runs-on: ubuntu-latest
#    timeout-minutes: 20
#    environment:
#      name: production
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v2
#        with:
#          fetch-depth: 0
#
#      - name: Downloading an archive production artifacts
#        uses: actions/download-artifact@v2
#        with:
#          path: dist
#
#      - name: Install SSH Key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'
#
#      - name: Adding Known Hosts
#        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts
#
#      - name: Deploy with rsync
#        run: rsync -avz . ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}
#
#


  deploy-stag:
    name: Staging deployment
    if: contains( github.ref, 'develop')
    runs-on: ubuntu-latest
    timeout-minutes: 10
    environment:
      name: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Downloading an archive production artifacts
        uses: actions/download-artifact@v2
        with:
          path: dist

      #      - shell: bash
      #        env:
      #          SUPER_SECRET: ${{ secrets.SuperSecret }}
      #        run: |
      #          echo "::set-output name=time::$SUPER_SECRET"
      #          echo "$SUPER_SECRET"

#      - name: Install SSH Key
#        uses: shimataro/ssh-key-action@v2
#        with:
#          key: ${{ secrets.SSH_PRIVATE_KEY }}
#          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Adding Known Hosts
        run: ssh-keyscan -H ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      - name: Deploy with rsync
        run: rsync -avz . ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}:${{ secrets.SSH_PATH }}

  deploy-prod:
    needs: build
    name: Production deployment
    if: github.event_name == 'push' && contains( github.ref, 'master')
    runs-on: ubuntu-latest
    timeout-minutes: 20
    environment:
      name: production
    steps:
      - uses: soprun/deploy@v1
        with:
          name: OctoCat
