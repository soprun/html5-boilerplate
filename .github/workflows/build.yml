name: Continuous integration

on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
  push:
    branches:
      - '**'
    tags:
      - '!**' # prevent running it for tags
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Setup node.js
        uses: actions/setup-node@v2
        env:
          NODE_ENV: development
        with:
          node-version: '14'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Get config cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Setup npm cache node_modules
        uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies
        run: npm ci --ignore-scripts

      - name: Run lint
        continue-on-error: true
        run: npm run lint

      - name: Run test
        continue-on-error: true
        run: npm run test

      - name: Run audit
        continue-on-error: true
        run: npm audit --production

      - name: Run npm-check
        continue-on-error: true
        run: npm run npm-check

      - name: Run build in production mode
        run: npm run build --if-present

      - name: Uploading an archive production artifacts
        uses: actions/upload-artifact@v2
        with:
          retention-days: 2
          name: build-dist
          path: |
            dist
            !dist/**/*.md

  job-1:
    needs: build
    name: Having no purpose
    continue-on-error: true
    runs-on: ubuntu-latest
    timeout-minutes: 10
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Get author name
        id: author
        run: echo "::set-output name=author::$(git show -s --format=%an)"

      - name: Print author name
        run: echo "${{ steps.author.outputs.author }}"

      - name: Print author name with an environment variable
        env:
          AUTHOR_NAME: ${{ steps.author.outputs.author }}
        run: echo $AUTHOR_NAME

      - name: Mask sensitive data
        env:
          SUPER_SECRET: The cake is a lie.
        run: |
          echo "::add-mask::password123"
          echo "My password is password123"
          echo "::add-mask::$SUPER_SECRET"
          echo "Here's a secret for you: $SUPER_SECRET"
