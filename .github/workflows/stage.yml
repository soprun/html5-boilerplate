name: Staging Deployment

on:
  push:
    branches: [ develop ]
  pull_request:
    types: [ labeled ]

jobs:
  stage:
    name: Staging Deployment
    runs-on: ubuntu-latest
    environment:
      name: staging
      url: ${{ steps.step_id.outputs.url_output }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup node.js
        uses: actions/setup-node@v2
        env:
          NODE_ENV: production
        with:
          node-version: '14'
          check-latest: true
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Get npm config get cache directory
        id: npm-cache-dir
        run: |
          echo "::set-output name=dir::$(npm config get cache)"

      - name: Setup npm cache node_modules
        uses: actions/cache@v2
        id: npm-cache # use this to check for `cache-hit` ==> if: steps.npm-cache.outputs.cache-hit != 'true'
        with:
          path: ${{ steps.npm-cache-dir.outputs.dir }}
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Run audit
        run: npm audit --production

      - name: Run npm-check-updates
        run: npm-check-updates --upgrade

      - run: echo "Deploying to stage server on branch ${GITHUB_REF}"
